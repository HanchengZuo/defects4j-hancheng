<!--
Copyright (c) 2014-2019 RenÃ© Just, Darioush Jalali, and Defects4J contributors.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

################################################################################
               This is the project-specific build file for Kafka.

It defines project-specific properties and targets, and imports the build file
of the checked-out project version.
#############################################################################-->

<project name="D4j-Kafka" basedir="${basedir}">

    <!-- Force build in Java 1.8 -->
    <property name="build.compiler" value="javac1.8"/>
    <property name="junit.jar" value="${script.dir}/build-scripts/lib/junit-4.11.jar"/>

    <!-- Define project-specific properties and paths -->
    <property name="source.home" value="metadata/src/main/java"/>
    <property name="test.home" value="metadata/src/test/java"/>
    <property name="build.home" value="metadata/build"/>
    <property name="build.classes" value="metadata/build/classes/java/main"/>
    <property name="build.test.classes" value="metadata/build/classes/java/test"/>

    <!-- Check for an existing build.xml -->
    <available file="${basedir}/build.xml" property="ant.exists"/>

    <!-- Determine if Gradle should be used -->
    <property name="use.gradle" value="true"/>

    <!-- Define compile.classpath -->
    <path id="compile.classpath">
        <fileset dir="${basedir}/${source.home}">
            <include name="**/*.java"/>
        </fileset>
        <fileset dir="${basedir}/${build.classes}">
            <include name="**/*.class"/>
        </fileset>
        <fileset dir="${d4j.home}/framework/projects/${d4j.project.id}/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- Define test.classpath -->
    <path id="test.classpath">
        <path refid="compile.classpath"/>
        <fileset dir="${basedir}/${test.home}">
            <include name="**/*.java"/>
        </fileset>
        <fileset dir="${basedir}/${build.test.classes}">
            <include name="**/*.class"/>
        </fileset>
        <fileset dir="${d4j.home}/framework/projects/${d4j.project.id}/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- Clean up working directory -->
    <target name="clean">
        <delete dir="${basedir}/compileLib"/>
        <subant target="clean" verbose="true">
            <fileset dir="${basedir}">
                <include name="**/build"/>
            </fileset>
        </subant>
    </target>

    <!-- Compile the sources using Gradle -->
    <target name="gradle.compile" if="use.gradle" unless="d4j.mutation">
        <!-- Call the Gradle build script -->
        <exec executable="${basedir}/gradlew" failonerror="true">
            <arg value="build"/>
            <arg value="-x"/>
            <arg value="rat"/>
            <arg value="-x"/>
            <arg value="test"/>
        </exec>
        <exec executable="${basedir}/gradlew" failonerror="true">
            <arg value="--stop"/>
        </exec>
    </target>

    <!-- Compile the tests using Gradle -->
    <target name="gradle.compile.tests" if="use.gradle">
        <!-- Call the Gradle build script -->
        <exec executable="${basedir}/gradlew" failonerror="true">
            <arg value="testClasses"/>
        </exec>
        <exec executable="${basedir}/gradlew" failonerror="true">
            <arg value="--stop"/>
        </exec>
    </target>

    <!-- Mutate classes if mutation is enabled using Gradle -->
    <target name="gradle.compile.mutants" if="d4j.mutation" unless="use.ant">
        <!-- Backup build file and set mutation compiler -->
        <copy file="${basedir}/build.gradle" tofile="${basedir}/build.gradle.bak"/>

        <trycatch>
            <try>
                <exec executable="${d4j.home}/framework/projects/${d4j.project.id}/setMutationCompiler.sh" failonerror="true">
                    <arg value="${basedir}"/>
                    <arg value="${d4j.home}"/>
                </exec>
                <!-- Call the Gradle build script -->
                <exec executable="${basedir}/gradlew" failonerror="true">
                    <arg value="build"/>
                    <arg value="-x"/>
                    <arg value="test"/>
                </exec>
                <exec executable="${basedir}/gradlew" failonerror="true">
                    <arg value="--stop"/>
                </exec>
            </try>
            <finally>
                <!-- Restore the default compiler -->
                <move file="${basedir}/build.gradle.bak" tofile="${basedir}/build.gradle"/>
            </finally>
        </trycatch>
    </target>

    <!-- Mutate classes if mutation is enabled using Ant -->
    <target name="ant.compile.mutants" if="d4j.mutation" unless="use.gradle">
        <ant antfile="${basedir}/build.xml" target="compile" inheritAll="true">
            <property name="build.compiler" value="major.ant.MajorCompiler"/>
        </ant>
    </target>

    <!-- Compile sources -->
    <target name="compile" description="Compile the Kafka source code.">
        <antcall target="gradle.compile"/>
        <antcall target="gradle.compile.tests"/>
        <antcall target="gradle.compile.mutants"/>
        <antcall target="ant.compile.mutants"/>

        <mkdir dir="${basedir}/compileLib"/>
    </target>

    <!-- Compile test cases -->
    <target name="compile.tests" description="Compile the Kafka tests." depends="compile">
        <antcall target="gradle.compile.tests"/>
    </target>

    <!-- Classpath to run developer-written tests -->
    <path id="d4j.test.classpath">
        <path refid="test.classpath"/>
        <pathelement location="${basedir}/${build.classes}"/>
        <pathelement location="${basedir}/${build.test.classes}"/>
        <pathelement path="${junit.jar}"/>
        <fileset dir="${d4j.home}/framework/projects/${d4j.project.id}/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- List of all developer-written tests that reliably pass on the fixed version -->
    <fileset id="all.manual.tests" dir="${basedir}" excludes="${d4j.tests.exclude}">
        <include name="metadata/src/test/java/**/*.*"/>
        <include name="metadata/build/classes/java/test/**/*.*"/>
    </fileset>

    <!-- List of relevant developer-written tests that reliably pass on the fixed version -->
    <fileset id="rel.manual.tests" dir="${basedir}" includesfile="${d4j.dir.projects}/${d4j.project.id}/relevant_tests/${d4j.bug.id}">
        <include name="metadata/src/test/java/**/*.*"/>
        <include name="metadata/build/classes/java/test/**/*.*"/>
    </fileset>

</project>
