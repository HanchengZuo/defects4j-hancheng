diff --git a/metadata/src/main/java/org/apache/kafka/metadata/authorizer/StandardAuthorizerData.java b/metadata/src/main/java/org/apache/kafka/metadata/authorizer/StandardAuthorizerData.java
index 6e9efc3cd5..c6e3b74a2a 100644
--- a/metadata/src/main/java/org/apache/kafka/metadata/authorizer/StandardAuthorizerData.java
+++ b/metadata/src/main/java/org/apache/kafka/metadata/authorizer/StandardAuthorizerData.java
@@ -352,10 +352,8 @@ public class StandardAuthorizerData {
         // This code relies on the ordering of StandardAcl within the NavigableMap.
         // Entries are sorted by resource type first, then REVERSE resource name.
         // Therefore, we can find all the applicable ACLs by starting at
-        // (resource_type, resource_name) and stepping forwards until we reach
-        // an ACL with a resource name which is not a prefix of the current one.
-        // At that point, we need to search for if there are any more ACLs at
-        // the first divergence point.
+        // (resource_type, resource_name) and stepping forwards until we reach an ACL with
+        // a resource name which is not a prefix of the current one.
         //
         // For example, when trying to authorize a TOPIC resource named foobar, we would
         // start at element 2, and continue on to 3 and 4 following map:
@@ -364,12 +362,9 @@ public class StandardAuthorizerData {
         // 2. rs=TOPIC rn=foobar pt=PREFIX
         // 3. rs=TOPIC rn=foob pt=LITERAL
         // 4. rs=TOPIC rn=foo pt=PREFIX
-        // 5. rs=TOPIC rn=fb pt=PREFIX
-        // 6. rs=TOPIC rn=fa pt=PREFIX
-        // 7. rs=TOPIC rn=f  pt=PREFIX
-        // 8. rs=TOPIC rn=eeee pt=LITERAL
+        // 5. rs=TOPIC rn=eeee pt=LITERAL
         //
-        // Once we reached element 5, we would jump to element 7.
+        // Once we reached element 5, we would stop scanning.
         MatchingAclBuilder matchingAclBuilder = new MatchingAclBuilder();
         StandardAcl exemplar = new StandardAcl(
             action.resourcePattern().resourceType(),
@@ -399,20 +394,6 @@ public class StandardAuthorizerData {
         return matchingAclBuilder.build();
     }
 
-    static int matchesUpTo(
-        String resource,
-        String pattern
-    ) {
-        int i = 0;
-        while (true) {
-            if (resource.length() == i) break;
-            if (pattern.length() == i) break;
-            if (resource.charAt(i) != pattern.charAt(i)) break;
-            i++;
-        }
-        return i;
-    }
-
     private void checkSection(
         Action action,
         StandardAcl exemplar,
@@ -420,40 +401,28 @@ public class StandardAuthorizerData {
         String host,
         MatchingAclBuilder matchingAclBuilder
     ) {
-        String resourceName = action.resourcePattern().name();
         NavigableSet<StandardAcl> tailSet = aclsByResource.tailSet(exemplar, true);
-        Iterator<StandardAcl> iterator = tailSet.iterator();
-        while (iterator.hasNext()) {
+        String resourceName = action.resourcePattern().name();
+        for (Iterator<StandardAcl> iterator = tailSet.iterator();
+             iterator.hasNext(); ) {
             StandardAcl acl = iterator.next();
             if (!acl.resourceType().equals(action.resourcePattern().resourceType())) {
                 // We've stepped outside the section for the resource type we care about and
                 // should stop scanning.
                 break;
             }
-            int matchesUpTo = matchesUpTo(resourceName, acl.resourceName());
-            if (matchesUpTo == acl.resourceName().length()) {
-                if (acl.patternType() == LITERAL && matchesUpTo != resourceName.length()) {
+            if (resourceName.startsWith(acl.resourceName())) {
+                if (acl.patternType() == LITERAL && !resourceName.equals(acl.resourceName())) {
                     // This is a literal ACL whose name is a prefix of the resource name, but
                     // which doesn't match it exactly. We should skip over this ACL, but keep
                     // scanning in case there are any relevant PREFIX ACLs.
                     continue;
                 }
-
             } else if (!(acl.resourceName().equals(WILDCARD) && acl.patternType() == LITERAL)) {
                 // If the ACL resource name is NOT a prefix of the current resource name,
                 // and we're not dealing with the special case of a wildcard ACL, we've
-                // stepped outside of the section we care about. Scan for any other potential
-                // prefix matches.
-                exemplar = new StandardAcl(exemplar.resourceType(),
-                    exemplar.resourceName().substring(0, matchesUpTo),
-                    exemplar.patternType(),
-                    exemplar.principal(),
-                    exemplar.host(),
-                    exemplar.operation(),
-                    exemplar.permissionType());
-                tailSet = aclsByResource.tailSet(exemplar, true);
-                iterator = tailSet.iterator();
-                continue;
+                // stepped outside of the section we care about and should stop scanning.
+                break;
             }
             AuthorizationResult result = findResult(action, matchingPrincipals, host, acl);
             if (ALLOWED == result) {
@@ -656,4 +625,4 @@ public class StandardAuthorizerData {
     HashMap<Uuid, StandardAcl> getAclsById() {
         return aclsById;
     }
-}
\ No newline at end of file
+}
